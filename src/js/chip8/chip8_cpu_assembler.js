// chip8_cpu_assemble
let chip8_cpu_assemble = (function(bus, options) {
  let equateMap = {};
  let read1 = function(a) {
    return read8(a) & 0x01;
  }
  let read2 = function(a) {
    return read8(a) & 0x03;
  }
  let read3 = function(a) {
    return read8(a) & 0x07;
  }
  let read4 = function(a) {
    return read8(a) & 0x0f;
  }
  let read5 = function(a) {
    return read8(a) & 0x1f;
  }
  let read6 = function(a) {
    return read8(a) & 0x3f;
  }
  let read7 = function(a) {
    return read8(a) & 0x7f;
  }
  let read8;
  let read9 = function(a) {
    return read16(a) & 0x1ff;
  }
  let read10 = function(a) {
    return read16(a) & 0x3ff;
  }
  let read11 = function(a) {
    return read16(a) & 0x7ff;
  }
  let read12 = function(a) {
    return read16(a) & 0xfff;
  }
  let read13 = function(a) {
    return read16(a) & 0x1fff;
  }
  let read14 = function(a) {
    return read16(a) & 0x3fff;
  }
  let read15 = function(a) {
    return read16(a) & 0x7fff;
  }
  let read16;

  /*
   **
   ** Equates table
   **
   */
  function clearEquateMap() {
    equateMap = {};
  }

  function setEquateValue(name, value) {
    name = name.toLowerCase();
    equateMap[name] = value;
  }

  function getEquateValue(name) {
    name = name.toLowerCase();
    return equateMap[name];
  }

  function getEquateMap(n) {
    return equateMap;
  }


  /*
   **
   ** The real work...
   **
   */
  function start() {
    read8 = bus.memory.read8;
    read16 = bus.memory.read16;
  }

  function assemble(str) {
    let pattern = null;
    let matched;
    let pc = new emf.Number(16); // TODO: Remove the need for this
    // cls_ret

    if ((matched = str.match(/cls_ret/i)) != null) {
      let rt = {
        pattern: "00000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n

    if ((matched = str.match(/jp\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "0001nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // call @n

    if ((matched = str.match(/call\s\s*\\s*\+\s*\s*\s*\\s*\(\s*\s*\w\s*\\s*\+\s*\s*\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v0\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00110000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v1\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00110001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v2\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00110010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v3\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00110011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v4\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00110100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v5\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00110101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v6\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00110110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v7\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00110111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v8\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00111000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+v9\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00111001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+va\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00111010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+vb\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00111011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+vc\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00111100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+vd\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00111101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+ve\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00111110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @n

    if ((matched = str.match(/skipeq\s+vf\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "00111111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v0\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01000000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v1\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01000001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v2\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01000010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v3\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01000011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v4\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01000100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v5\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01000101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v6\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01000110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v7\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01000111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v8\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01001000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+v9\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01001001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+va\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01001010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+vb\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01001011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+vc\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01001100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+vd\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01001101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+ve\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01001110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipneq @r, @n

    if ((matched = str.match(/skipneq\s+vf\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01001111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v0\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v1\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01010001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v2\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01010010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v3\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01010011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v4\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01010100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v5\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01010101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v6\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01010110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v7\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01010111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v8\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01011000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*v9\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01011001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*va\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01011010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*vb\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01011011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*vc\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01011100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*vd\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01011101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*ve\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01011110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skipeq @r, @s

    if ((matched = str.match(/skipeq\s\s*\+\s*vf\s*\s*,\s*\s*\s\s*\+\s*@s/i)) != null) {
      let rt = {
        pattern: "01011111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v0\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01100000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v1\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01100001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v2\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01100010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v3\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01100011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v4\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01100100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v5\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01100101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v6\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01100110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v7\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01100111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v8\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01101000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+v9\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01101001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+va\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01101010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+vb\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01101011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+vc\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01101100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+vd\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01101101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+ve\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01101110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // store @r, @n

    if ((matched = str.match(/store\s+vf\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01101111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v0\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01110000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v1\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01110001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v2\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01110010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v3\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01110011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v4\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01110100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v5\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01110101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v6\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01110110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v7\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01110111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v8\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01111000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+v9\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01111001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+va\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01111010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+vb\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01111011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+vc\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01111100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+vd\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01111101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+ve\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01111110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // add @r, @n

    if ((matched = str.match(/add\s+vf\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "01111111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v0\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v1\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10000001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v2\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10000010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v3\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10000011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v4\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10000100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v5\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10000101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v6\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10000110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v7\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10000111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v8\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10001000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*v9\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10001001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*va\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10001010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*vb\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10001011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*vc\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10001100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*vd\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10001101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*ve\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10001110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (store @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*store\s\s*\+\s*vf\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10001111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v0\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v1\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10010001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v2\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10010010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v3\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10010011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v4\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10010100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v5\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10010101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v6\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10010110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v7\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10010111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v8\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10011000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*v9\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10011001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*va\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10011010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*vb\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10011011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*vc\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10011100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*vd\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10011101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*ve\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10011110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (skipneq @r, @s)

    if ((matched = str.match(/\s*\\s*\(\s*\s*skipneq\s\s*\+\s*vf\s*\s*,\s*\s*\s\s*\+\s*@s\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "10011111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // ld I, @n

    if ((matched = str.match(/ld\s+I\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "1010nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // jp @n + V0

    if ((matched = str.match(/jp\s+(\w+)\s+\s*\+\s*\s+V0/i)) != null) {
      let rt = {
        pattern: "1011nnnnnnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin12(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v0\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11000000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v1\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11000001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v2\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11000010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v3\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11000011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v4\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11000100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v5\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11000101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v6\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11000110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v7\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11000111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v8\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11001000nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+v9\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11001001nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+va\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11001010nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+vb\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11001011nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+vc\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11001100nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+vd\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11001101nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+ve\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11001110nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // rnd @r, @n

    if ((matched = str.match(/rnd\s+vf\s*,\s*\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "11001111nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
        parseInt(rt.pattern.substr(8, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v0\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v1\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11010001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v2\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11010010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v3\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11010011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v4\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11010100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v5\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11010101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v6\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11010110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v7\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11010111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v8\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11011000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*v9\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11011001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*va\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11011010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*vb\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11011011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*vc\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11011100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*vd\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11011101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*ve\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11011110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\+\s*vf\s*\s*,\s*\s*\s\s*\+\s*@s\s*\s*,\s*\s*\s\s*\+\s*@n/i)) != null) {
      let rt = {
        pattern: "11011111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "11100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "11100001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "11100010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "11100011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "11100100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "11100101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "11100110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "11100111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "11101000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "11101001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "11101010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "11101011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11101100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11101101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11101110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // key(n)p @r

    if ((matched = str.match(/key\s*\\s*\(\s*\s*n\s*\\s*\)\s*\s*p\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11101111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11110001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11110010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11110011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11110100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11110101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11110110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11110111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11111000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11111001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11111010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11111011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11111100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11111101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11111110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // (f)

    if ((matched = str.match(/\s*\\s*\(\s*\s*f\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "11111111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // cls

    if ((matched = str.match(/cls/i)) != null) {
      let rt = {
        pattern: "11100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // ret

    if ((matched = str.match(/ret/i)) != null) {
      let rt = {
        pattern: "11101110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v0\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v1\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v2\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v3\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v4\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v5\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v6\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v7\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "0111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v8\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1000nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*v9\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1001nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*va\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1010nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vb\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1011nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vc\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1100nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vd\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1101nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*ve\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1110nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // drw @r, @s, @n

    if ((matched = str.match(/drw\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*@r\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*vf\s*\s*\s*\s*\s*\s*,\s*\s*\s*\s*\s*\s*\s\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\(\s*\s*\s*\s*\s*\w\s*\\s*\\s*\\s*\\s*\+\s*\s*\s*\s*\s*\s*\\s*\\s*\\s*\\s*\)\s*\s*\s*\s*\s*/i)) != null) {
      let rt = {
        pattern: "1111nnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin4(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "00000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "00000001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "00000010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "00000011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "00000100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v0/i)) != null) {
      let rt = {
        pattern: "00000101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "00000110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v0/i)) != null) {
      let rt = {
        pattern: "00000111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "00001110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "00010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "00010001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "00010010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "00010011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "00010100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v1/i)) != null) {
      let rt = {
        pattern: "00010101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "00010110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v1/i)) != null) {
      let rt = {
        pattern: "00010111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "00011110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "00100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "00100001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "00100010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "00100011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "00100100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v2/i)) != null) {
      let rt = {
        pattern: "00100101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "00100110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v2/i)) != null) {
      let rt = {
        pattern: "00100111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "00101110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "00110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "00110001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "00110010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "00110011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "00110100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v3/i)) != null) {
      let rt = {
        pattern: "00110101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "00110110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v3/i)) != null) {
      let rt = {
        pattern: "00110111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "00111110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "01000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "01000001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "01000010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "01000011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "01000100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v4/i)) != null) {
      let rt = {
        pattern: "01000101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "01000110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v4/i)) != null) {
      let rt = {
        pattern: "01000111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "01001110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "01010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "01010001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "01010010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "01010011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "01010100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v5/i)) != null) {
      let rt = {
        pattern: "01010101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "01010110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v5/i)) != null) {
      let rt = {
        pattern: "01010111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "01011110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "01100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "01100001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "01100010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "01100011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "01100100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v6/i)) != null) {
      let rt = {
        pattern: "01100101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "01100110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v6/i)) != null) {
      let rt = {
        pattern: "01100111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "01101110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "01110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "01110001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "01110010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "01110011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "01110100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v7/i)) != null) {
      let rt = {
        pattern: "01110101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "01110110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v7/i)) != null) {
      let rt = {
        pattern: "01110111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "01111110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "10000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "10000001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "10000010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "10000011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "10000100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v8/i)) != null) {
      let rt = {
        pattern: "10000101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "10000110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v8/i)) != null) {
      let rt = {
        pattern: "10000111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "10001110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "10010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "10010001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "10010010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "10010011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "10010100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v9/i)) != null) {
      let rt = {
        pattern: "10010101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "10010110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*v9/i)) != null) {
      let rt = {
        pattern: "10010111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "10011110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "10100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "10100001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "10100010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "10100011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "10100100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*va/i)) != null) {
      let rt = {
        pattern: "10100101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "10100110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*va/i)) != null) {
      let rt = {
        pattern: "10100111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "10101110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "10110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "10110001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "10110010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "10110011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "10110100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*vb/i)) != null) {
      let rt = {
        pattern: "10110101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "10110110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*vb/i)) != null) {
      let rt = {
        pattern: "10110111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "10111110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11000001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11000010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11000011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11000100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*vc/i)) != null) {
      let rt = {
        pattern: "11000101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11000110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*vc/i)) != null) {
      let rt = {
        pattern: "11000111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11001110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11010001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11010010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11010011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11010100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*vd/i)) != null) {
      let rt = {
        pattern: "11010101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11010110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*vd/i)) != null) {
      let rt = {
        pattern: "11010111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11011110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11100001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11100010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11100011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11100100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*ve/i)) != null) {
      let rt = {
        pattern: "11100101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11100110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*ve/i)) != null) {
      let rt = {
        pattern: "11100111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11101110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // store @r, @s

    if ((matched = str.match(/store\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // or @r, @s

    if ((matched = str.match(/or\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11110001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // and @r, @s

    if ((matched = str.match(/and\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11110010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // xor @r, @s

    if ((matched = str.match(/xor\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11110011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // addc @r, @s

    if ((matched = str.match(/addc\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11110100",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subc @r, @s

    if ((matched = str.match(/subc\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*vf/i)) != null) {
      let rt = {
        pattern: "11110101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shr @r, @s
    // Reference:  page 
    // Reference: The docs suggest that we should shift with @s, but the existing implentations don't. We follow what works, and mimic other peoples codes.

    if ((matched = str.match(/shr\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11110110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // subn @r, @s

    if ((matched = str.match(/subn\s\s*\\s*\+\s*\s*@r\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*vf/i)) != null) {
      let rt = {
        pattern: "11110111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // shl @r, @s

    if ((matched = str.match(/shl\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11111110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "00000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "00010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "00100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "00110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "01000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "01010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "01100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "01110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "10000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "10010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "10100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "10110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpeq @r, @s

    if ((matched = str.match(/skpeq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v0/i)) != null) {
      let rt = {
        pattern: "00000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v1/i)) != null) {
      let rt = {
        pattern: "00010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v2/i)) != null) {
      let rt = {
        pattern: "00100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v3/i)) != null) {
      let rt = {
        pattern: "00110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v4/i)) != null) {
      let rt = {
        pattern: "01000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v5/i)) != null) {
      let rt = {
        pattern: "01010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v6/i)) != null) {
      let rt = {
        pattern: "01100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v7/i)) != null) {
      let rt = {
        pattern: "01110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v8/i)) != null) {
      let rt = {
        pattern: "10000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*v9/i)) != null) {
      let rt = {
        pattern: "10010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*va/i)) != null) {
      let rt = {
        pattern: "10100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vb/i)) != null) {
      let rt = {
        pattern: "10110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vc/i)) != null) {
      let rt = {
        pattern: "11000000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vd/i)) != null) {
      let rt = {
        pattern: "11010000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*ve/i)) != null) {
      let rt = {
        pattern: "11100000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // skpneq @r, @s

    if ((matched = str.match(/skpneq\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*vf/i)) != null) {
      let rt = {
        pattern: "11110000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // keyp @r

    if ((matched = str.match(/keyp\s\s*\+\s*@r/i)) != null) {
      let rt = {
        pattern: "10011110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // keynp @r

    if ((matched = str.match(/keynp\s\s*\+\s*@r/i)) != null) {
      let rt = {
        pattern: "10100001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // ld @r, DT

    if ((matched = str.match(/ld\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*DT/i)) != null) {
      let rt = {
        pattern: "00000111",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // ld @r, K

    if ((matched = str.match(/ld\s\s*\+\s*@r\s*\s*,\s*\s*\s\s*\+\s*K/i)) != null) {
      let rt = {
        pattern: "00001010",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // ld DT, @r

    if ((matched = str.match(/ld\s\s*\+\s*DT\s*\s*,\s*\s*\s\s*\+\s*@r/i)) != null) {
      let rt = {
        pattern: "00010101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // ld ST, @r

    if ((matched = str.match(/ld\s\s*\\s*\+\s*\s*ST\s*\s*\s*,\s*\s*\s*\s\s*\\s*\+\s*\s*@r/i)) != null) {
      let rt = {
        pattern: "00011000",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // add I, @r

    if ((matched = str.match(/add\s\s*\+\s*I\s*\s*,\s*\s*\s\s*\+\s*@r/i)) != null) {
      let rt = {
        pattern: "00011110",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // set I, (@r)

    if ((matched = str.match(/set\s\s*\+\s*I\s*\s*,\s*\s*\s\s*\+\s*\s*\\s*\(\s*\s*@r\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "00101001",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // bcd I, (@r)

    if ((matched = str.match(/bcd\s\s*\+\s*I\s*\s*,\s*\s*\s\s*\+\s*\s*\\s*\(\s*\s*@r\s*\\s*\)\s*\s*/i)) != null) {
      let rt = {
        pattern: "00110011",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // cpy [I], v0-@r

    if ((matched = str.match(/cpy\s\s*\+\s*[I]\s*\s*,\s*\s*\s\s*\+\s*v0\s*\s*-\s*\s*@r/i)) != null) {
      let rt = {
        pattern: "01010101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // cpy v0-@r, [I]

    if ((matched = str.match(/cpy\s\s*\+\s*v0\s*\s*-\s*\s*@r\s*\s*,\s*\s*\s\s*\+\s*[I]/i)) != null) {
      let rt = {
        pattern: "01100101",
        retry: false
      };
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    // dc.b @n

    if ((matched = str.match(/dc.b\s+(\w+)/i)) != null) {
      let rt = {
        pattern: "nnnnnnnn",
        retry: false
      };
      let value0 = emf.utils.convertToDecimal(matched[1]);
      if (value0 == undefined) {
        value0 = getEquateValue(matched[1]);
        if (value0 == undefined) {
          rt.retry = true;
          value0 = 0xeeee;
        }
      }
      rt.pattern = rt.pattern.replace(/n+/, emf.utils.bin8(value0));
      rt.data = [
        parseInt(rt.pattern.substr(0, 8), 2),
      ]
      return rt;
    }

    return pattern;
  }
  return {
    clearEquateMap,
    setEquateValue,
    getEquateMap,
    getEquateValue,

    start,
    assemble
  }
});